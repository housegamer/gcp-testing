steps:
# - name: 'google/cloud-sdk:latest'
#   id: Create .Env File
#   entrypoint: 'bash'
#   args:
#   - -xe
#   - -c
#   - |
#     echo '$$test-ci' > .env
#     cp /workspace/.env /workspace/backend
#   secretEnv: ['test-ci']

- name: 'gcr.io/cloud-builders/gcloud'
  entrypoint: 'bash'
  id: 'Create Backend .Env File'
  args:
  - -xe
  - -c
  - |
    gcloud secrets versions access latest --secret='test-ci' --format='get(payload.data)' | base64 -d > .env
    cat .env
    cp /workspace/.env /workspace/backend

- name: 'gcr.io/cloud-builders/gcloud'
  entrypoint: 'bash'
  id: 'Create Frontend .Env File'
  args:
  - -xe
  - -c
  - |
    gcloud secrets versions access latest --secret='user-data' --format='get(payload.data)' | base64 -d > .env
    cat .env
    cp /workspace/.env /workspace/frontend

- name: 'gcr.io/cloud-builders/docker'
  args: ['build', '-t', '$LOCATION-docker.pkg.dev/$PROJECT_ID/$_ARTIFACT_REPO/$_BACKEND:v.$_TAG_BACKEND.${SHORT_SHA}', './backend']
  id: 'Build backend'

- name: 'gcr.io/cloud-builders/docker'
  args: ['push', '$LOCATION-docker.pkg.dev/$PROJECT_ID/$_ARTIFACT_REPO/$_BACKEND:v.$_TAG_BACKEND.${SHORT_SHA}']
  id: 'Push backend'

- name: 'gcr.io/cloud-builders/docker'
  args: ['build', '-t', '$LOCATION-docker.pkg.dev/$PROJECT_ID/$_ARTIFACT_REPO/$_FRONTEND:v.$_TAG_FRONTEND.${SHORT_SHA}', './frontend']
  id: 'Build Frontend'

- name: 'gcr.io/cloud-builders/docker'
  args: ['push', '$LOCATION-docker.pkg.dev/$PROJECT_ID/$_ARTIFACT_REPO/$_FRONTEND:v.$_TAG_FRONTEND.${SHORT_SHA}']
  id: 'Push Frontend'

- name: 'google/cloud-sdk:latest'
  id: 'Delivery Pipeline'
  entrypoint: 'bash'
  args:
  - -xe
  - -c
  - |
    gcloud deploy apply --file deploy/pipeline.yaml --region $LOCATION
    gcloud deploy apply --file deploy/dev.yaml --region $LOCATION

# - name: 'bash'
#   id: 'Target Validation'
#   script: |
#     #!/usr/bin/env bash

#     set -xe

#     curl -O https://dl.google.com/dl/cloudsdk/channels/rapid/downloads/google-cloud-cli-linux-x86_64.tar.gz
#     tar -xf google-cloud-cli-linux-x86_64.tar.gz
#     ./google-cloud-sdk/install.sh
#     ./google-cloud-sdk/bin/gcloud init

#     LIST=$(gcloud deploy releases list --delivery-pipeline test-cd-pipeline --region $LOCATION | head -n 20)

#     echo $LIST


- name: 'google/cloud-sdk:latest'
  id: 'Target Pipeline'
  # allowExitCodes: [1]
  entrypoint: 'bash'
  args: 
  - -c
  - -xe
  - |

    # gcloud deploy releases describe app-${_BACKEND}-release-${SHORT_SHA} --delivery-pipeline test-cd-pipeline --region $LOCATION | grep -i "succ*" | awk "{print \$2}" > success-releases.txt

    # if [[success-releases.txt | grep -i "succ*" == "SUCCEEDED"]]; then
    #   echo "release already exists"
    # else
    #     gcloud deploy releases create app-${_BACKEND}-release-${SHORT_SHA} --delivery-pipeline test-cd-pipeline --region $LOCATION --images=$_BACKEND=$LOCATION-docker.pkg.dev/$PROJECT_ID/$_ARTIFACT_REPO/$_BACKEND:v.$_TAG_BACKEND.${SHORT_SHA} --from-k8s-manifest=./kubernetes/app.yaml  
    # fi
    gcloud deploy releases describe app-${_BACKEND}-release-${SHORT_SHA} --delivery-pipeline test-cd-pipeline --region $LOCATION | grep -i "succ*" | awk "{print \$2}" > success-releases.txt

    for file in success-releases.txt; do
      if file == "SUCCEEDED"; then
        echo "releases already created"
      else
        gcloud deploy releases create app-${_BACKEND}-release-${SHORT_SHA} --delivery-pipeline test-cd-pipeline --region $LOCATION --images=$_BACKEND=$LOCATION-docker.pkg.dev/$PROJECT_ID/$_ARTIFACT_REPO/$_BACKEND:v.$_TAG_BACKEND.${SHORT_SHA} --from-k8s-manifest=./kubernetes/app.yaml
        echo "deploying app-${_BACKEND}-release-${SHORT_SHA}"
      fi
    done

    # while read line; do
    #     if grep -q "FAILURE" <<< "$line"; then
    #         echo "$line"
    #     else
    #       gcloud deploy releases create app-${_BACKEND}-release-${SHORT_SHA} --delivery-pipeline test-cd-pipeline --region $LOCATION --images=$_BACKEND=$LOCATION-docker.pkg.dev/$PROJECT_ID/$_ARTIFACT_REPO/$_BACKEND:v.$_TAG_BACKEND.${SHORT_SHA} --from-k8s-manifest=./kubernetes/app.yaml
    #       echo "deploying app-${_BACKEND}-release-${SHORT_SHA}"
    #     fi
    # done < success-releases.txt

    # if [[ success-releases.txt == "SUCCEEDED" ]]; then
    #   echo "release already exists"
    # else
    #   gcloud deploy releases create app-${_BACKEND}-release-${SHORT_SHA} --delivery-pipeline test-cd-pipeline --region $LOCATION --images=$_BACKEND=$LOCATION-docker.pkg.dev/$PROJECT_ID/$_ARTIFACT_REPO/$_BACKEND:v.$_TAG_BACKEND.${SHORT_SHA} --from-k8s-manifest=./kubernetes/app.yaml  
    # fi

    # gcloud deploy releases create app-${_BACKEND}-release-${SHORT_SHA} --delivery-pipeline test-cd-pipeline --region $LOCATION --images=$_BACKEND=$LOCATION-docker.pkg.dev/$PROJECT_ID/$_ARTIFACT_REPO/$_BACKEND:v.$_TAG_BACKEND.${SHORT_SHA} --from-k8s-manifest=./kubernetes/app.yaml
    # gcloud deploy releases create app-${_FRONTEND}-release-${SHORT_SHA} --delivery-pipeline test-cd-pipeline --region $LOCATION --images=$_FRONTEND=$LOCATION-docker.pkg.dev/$PROJECT_ID/$_ARTIFACT_REPO/$_FRONTEND:v.$_TAG_FRONTEND.${SHORT_SHA} --from-k8s-manifest=./kubernetes/frontend.yaml

- name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
  entrypoint: 'bash'
  id: 'K8 Validation'
  args:
  - -c
  - -xe
  - |
    gcloud container clusters get-credentials test-cluster-1 --zone us-east4 --dns-endpoint

    kubectl apply -f ./kubernetes/app.yaml --force
    kubectl apply -f ./kubernetes/frontend.yaml --force

# - name: 'gcr.io/cloud-builders/kubectl'
#   id: 'K8 Validation Pipeline'
#   # entrypoint: 'kubectl'
#   # allowExitCodes: [1]
#   # automapSubstitutions: false
#   env:
#   - 'CLOUDSDK_COMPUTE_REGION=us-east4'
#   - 'CLOUDSDK_CONTAINER_CLUSTER=test-cluster-1'
#   args: ['apply', '-f','./kubernetes/frontend.yaml','--force']

# - name: 'gcr.io/cloud-builders/gke-deploy'
#   id: 'K8 Validation Pipeline'
#   # entrypoint: 'kubectl'
#   # allowExitCodes: [1]
#   # automapSubstitutions: false
#   args:
#   - 'apply'
#   - '--filename=./kubernetes/frontend.yaml'
#   - '--location=us-east4'
#   - '--cluster=test-cluster-1'
  # - '--force=true'

# availableSecrets:
#   secretManager:
#   - versionName: projects/$PROJECT_ID/secrets/$_SECRET_NAME/versions/1
#     env: 'TEST_CI'

options:
  logging: CLOUD_LOGGING_ONLY
